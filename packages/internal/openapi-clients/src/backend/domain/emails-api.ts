/* tslint:disable */
/* eslint-disable */
/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BaseEntityListResponseEmailSampleResponse } from '../models';
// @ts-ignore
import { CreateEmailSampleRequest } from '../models';
// @ts-ignore
import { CreateSMTPConfigRequest } from '../models';
// @ts-ignore
import { DeleteSMTPConfigResponse } from '../models';
// @ts-ignore
import { EmailSampleDeleteResponse } from '../models';
// @ts-ignore
import { EmailSampleResponse } from '../models';
// @ts-ignore
import { EmailTypeRequest } from '../models';
// @ts-ignore
import { SMTPConfigResponse } from '../models';
// @ts-ignore
import { UpdateEmailSampleRequest } from '../models';
// @ts-ignore
import { UpdateSMTPConfigRequest } from '../models';
/**
 * EmailsApi - axios parameter creator
 * @export
 */
export const EmailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new email sample.
         * @summary Create a new email sample.
         * @param {CreateEmailSampleRequest} createEmailSampleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailSample: async (createEmailSampleRequest: CreateEmailSampleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createEmailSampleRequest' is not null or undefined
            assertParamExists('createEmailSample', 'createEmailSampleRequest', createEmailSampleRequest)
            const localVarPath = `/v1/emails/samples`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEmailSampleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new SMTP configuration.
         * @summary Create a new SMTP configuration.
         * @param {CreateSMTPConfigRequest} createSMTPConfigRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSMTPConfig: async (createSMTPConfigRequest: CreateSMTPConfigRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSMTPConfigRequest' is not null or undefined
            assertParamExists('createSMTPConfig', 'createSMTPConfigRequest', createSMTPConfigRequest)
            const localVarPath = `/v1/emails/smtp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSMTPConfigRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an email sample.
         * @summary Get an email sample.
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSample: async (uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getEmailSample', 'uuid', uuid)
            const localVarPath = `/v1/emails/samples/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Email Samples by Type.
         * @summary Get Email Samples by Type.
         * @param {EmailTypeRequest} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSamplesByType: async (type: EmailTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getEmailSamplesByType', 'type', type)
            const localVarPath = `/v1/emails/samples/type/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the SMTP configuration.
         * @summary Get the SMTP configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSMTPConfig: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/emails/smtp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List email samples.
         * @summary List email samples.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmailSamples: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/emails/samples`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an email sample.
         * @summary Remove an email sample.
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEmailSample: async (uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('removeEmailSample', 'uuid', uuid)
            const localVarPath = `/v1/emails/samples/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the SMTP configuration.
         * @summary Remove the SMTP configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSMTPConfig: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/emails/smtp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an email sample.
         * @summary Update an email sample.
         * @param {string} uuid 
         * @param {UpdateEmailSampleRequest} updateEmailSampleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailSample: async (uuid: string, updateEmailSampleRequest: UpdateEmailSampleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('updateEmailSample', 'uuid', uuid)
            // verify required parameter 'updateEmailSampleRequest' is not null or undefined
            assertParamExists('updateEmailSample', 'updateEmailSampleRequest', updateEmailSampleRequest)
            const localVarPath = `/v1/emails/samples/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEmailSampleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the SMTP configuration.
         * @summary Update the SMTP configuration.
         * @param {UpdateSMTPConfigRequest} updateSMTPConfigRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSMTPConfig: async (updateSMTPConfigRequest: UpdateSMTPConfigRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateSMTPConfigRequest' is not null or undefined
            assertParamExists('updateSMTPConfig', 'updateSMTPConfigRequest', updateSMTPConfigRequest)
            const localVarPath = `/v1/emails/smtp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSMTPConfigRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailsApi - functional programming interface
 * @export
 */
export const EmailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmailsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new email sample.
         * @summary Create a new email sample.
         * @param {CreateEmailSampleRequest} createEmailSampleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmailSample(createEmailSampleRequest: CreateEmailSampleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailSampleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmailSample(createEmailSampleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new SMTP configuration.
         * @summary Create a new SMTP configuration.
         * @param {CreateSMTPConfigRequest} createSMTPConfigRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSMTPConfig(createSMTPConfigRequest: CreateSMTPConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SMTPConfigResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSMTPConfig(createSMTPConfigRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an email sample.
         * @summary Get an email sample.
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmailSample(uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailSampleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmailSample(uuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Email Samples by Type.
         * @summary Get Email Samples by Type.
         * @param {EmailTypeRequest} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmailSamplesByType(type: EmailTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailSampleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmailSamplesByType(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the SMTP configuration.
         * @summary Get the SMTP configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSMTPConfig(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SMTPConfigResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSMTPConfig(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List email samples.
         * @summary List email samples.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmailSamples(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseEntityListResponseEmailSampleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmailSamples(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove an email sample.
         * @summary Remove an email sample.
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeEmailSample(uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailSampleDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEmailSample(uuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the SMTP configuration.
         * @summary Remove the SMTP configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSMTPConfig(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteSMTPConfigResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSMTPConfig(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an email sample.
         * @summary Update an email sample.
         * @param {string} uuid 
         * @param {UpdateEmailSampleRequest} updateEmailSampleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmailSample(uuid: string, updateEmailSampleRequest: UpdateEmailSampleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailSampleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmailSample(uuid, updateEmailSampleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the SMTP configuration.
         * @summary Update the SMTP configuration.
         * @param {UpdateSMTPConfigRequest} updateSMTPConfigRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSMTPConfig(updateSMTPConfigRequest: UpdateSMTPConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SMTPConfigResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSMTPConfig(updateSMTPConfigRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmailsApi - factory interface
 * @export
 */
export const EmailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmailsApiFp(configuration)
    return {
        /**
         * Create a new email sample.
         * @summary Create a new email sample.
         * @param {EmailsApiCreateEmailSampleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailSample(requestParameters: EmailsApiCreateEmailSampleRequest, options?: AxiosRequestConfig): AxiosPromise<EmailSampleResponse> {
            return localVarFp.createEmailSample(requestParameters.createEmailSampleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new SMTP configuration.
         * @summary Create a new SMTP configuration.
         * @param {EmailsApiCreateSMTPConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSMTPConfig(requestParameters: EmailsApiCreateSMTPConfigRequest, options?: AxiosRequestConfig): AxiosPromise<SMTPConfigResponse> {
            return localVarFp.createSMTPConfig(requestParameters.createSMTPConfigRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an email sample.
         * @summary Get an email sample.
         * @param {EmailsApiGetEmailSampleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSample(requestParameters: EmailsApiGetEmailSampleRequest, options?: AxiosRequestConfig): AxiosPromise<EmailSampleResponse> {
            return localVarFp.getEmailSample(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Email Samples by Type.
         * @summary Get Email Samples by Type.
         * @param {EmailsApiGetEmailSamplesByTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSamplesByType(requestParameters: EmailsApiGetEmailSamplesByTypeRequest, options?: AxiosRequestConfig): AxiosPromise<EmailSampleResponse> {
            return localVarFp.getEmailSamplesByType(requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the SMTP configuration.
         * @summary Get the SMTP configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSMTPConfig(options?: AxiosRequestConfig): AxiosPromise<SMTPConfigResponse> {
            return localVarFp.getSMTPConfig(options).then((request) => request(axios, basePath));
        },
        /**
         * List email samples.
         * @summary List email samples.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmailSamples(options?: AxiosRequestConfig): AxiosPromise<BaseEntityListResponseEmailSampleResponse> {
            return localVarFp.listEmailSamples(options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an email sample.
         * @summary Remove an email sample.
         * @param {EmailsApiRemoveEmailSampleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEmailSample(requestParameters: EmailsApiRemoveEmailSampleRequest, options?: AxiosRequestConfig): AxiosPromise<EmailSampleDeleteResponse> {
            return localVarFp.removeEmailSample(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the SMTP configuration.
         * @summary Remove the SMTP configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSMTPConfig(options?: AxiosRequestConfig): AxiosPromise<DeleteSMTPConfigResponse> {
            return localVarFp.removeSMTPConfig(options).then((request) => request(axios, basePath));
        },
        /**
         * Update an email sample.
         * @summary Update an email sample.
         * @param {EmailsApiUpdateEmailSampleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailSample(requestParameters: EmailsApiUpdateEmailSampleRequest, options?: AxiosRequestConfig): AxiosPromise<EmailSampleResponse> {
            return localVarFp.updateEmailSample(requestParameters.uuid, requestParameters.updateEmailSampleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the SMTP configuration.
         * @summary Update the SMTP configuration.
         * @param {EmailsApiUpdateSMTPConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSMTPConfig(requestParameters: EmailsApiUpdateSMTPConfigRequest, options?: AxiosRequestConfig): AxiosPromise<SMTPConfigResponse> {
            return localVarFp.updateSMTPConfig(requestParameters.updateSMTPConfigRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createEmailSample operation in EmailsApi.
 * @export
 * @interface EmailsApiCreateEmailSampleRequest
 */
export interface EmailsApiCreateEmailSampleRequest {
    /**
     * 
     * @type {CreateEmailSampleRequest}
     * @memberof EmailsApiCreateEmailSample
     */
    readonly createEmailSampleRequest: CreateEmailSampleRequest
}

/**
 * Request parameters for createSMTPConfig operation in EmailsApi.
 * @export
 * @interface EmailsApiCreateSMTPConfigRequest
 */
export interface EmailsApiCreateSMTPConfigRequest {
    /**
     * 
     * @type {CreateSMTPConfigRequest}
     * @memberof EmailsApiCreateSMTPConfig
     */
    readonly createSMTPConfigRequest: CreateSMTPConfigRequest
}

/**
 * Request parameters for getEmailSample operation in EmailsApi.
 * @export
 * @interface EmailsApiGetEmailSampleRequest
 */
export interface EmailsApiGetEmailSampleRequest {
    /**
     * 
     * @type {string}
     * @memberof EmailsApiGetEmailSample
     */
    readonly uuid: string
}

/**
 * Request parameters for getEmailSamplesByType operation in EmailsApi.
 * @export
 * @interface EmailsApiGetEmailSamplesByTypeRequest
 */
export interface EmailsApiGetEmailSamplesByTypeRequest {
    /**
     * 
     * @type {EmailTypeRequest}
     * @memberof EmailsApiGetEmailSamplesByType
     */
    readonly type: EmailTypeRequest
}

/**
 * Request parameters for removeEmailSample operation in EmailsApi.
 * @export
 * @interface EmailsApiRemoveEmailSampleRequest
 */
export interface EmailsApiRemoveEmailSampleRequest {
    /**
     * 
     * @type {string}
     * @memberof EmailsApiRemoveEmailSample
     */
    readonly uuid: string
}

/**
 * Request parameters for updateEmailSample operation in EmailsApi.
 * @export
 * @interface EmailsApiUpdateEmailSampleRequest
 */
export interface EmailsApiUpdateEmailSampleRequest {
    /**
     * 
     * @type {string}
     * @memberof EmailsApiUpdateEmailSample
     */
    readonly uuid: string

    /**
     * 
     * @type {UpdateEmailSampleRequest}
     * @memberof EmailsApiUpdateEmailSample
     */
    readonly updateEmailSampleRequest: UpdateEmailSampleRequest
}

/**
 * Request parameters for updateSMTPConfig operation in EmailsApi.
 * @export
 * @interface EmailsApiUpdateSMTPConfigRequest
 */
export interface EmailsApiUpdateSMTPConfigRequest {
    /**
     * 
     * @type {UpdateSMTPConfigRequest}
     * @memberof EmailsApiUpdateSMTPConfig
     */
    readonly updateSMTPConfigRequest: UpdateSMTPConfigRequest
}

/**
 * EmailsApi - object-oriented interface
 * @export
 * @class EmailsApi
 * @extends {BaseAPI}
 */
export class EmailsApi extends BaseAPI {
    /**
     * Create a new email sample.
     * @summary Create a new email sample.
     * @param {EmailsApiCreateEmailSampleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public createEmailSample(requestParameters: EmailsApiCreateEmailSampleRequest, options?: AxiosRequestConfig) {
        return EmailsApiFp(this.configuration).createEmailSample(requestParameters.createEmailSampleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new SMTP configuration.
     * @summary Create a new SMTP configuration.
     * @param {EmailsApiCreateSMTPConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public createSMTPConfig(requestParameters: EmailsApiCreateSMTPConfigRequest, options?: AxiosRequestConfig) {
        return EmailsApiFp(this.configuration).createSMTPConfig(requestParameters.createSMTPConfigRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an email sample.
     * @summary Get an email sample.
     * @param {EmailsApiGetEmailSampleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public getEmailSample(requestParameters: EmailsApiGetEmailSampleRequest, options?: AxiosRequestConfig) {
        return EmailsApiFp(this.configuration).getEmailSample(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Email Samples by Type.
     * @summary Get Email Samples by Type.
     * @param {EmailsApiGetEmailSamplesByTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public getEmailSamplesByType(requestParameters: EmailsApiGetEmailSamplesByTypeRequest, options?: AxiosRequestConfig) {
        return EmailsApiFp(this.configuration).getEmailSamplesByType(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the SMTP configuration.
     * @summary Get the SMTP configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public getSMTPConfig(options?: AxiosRequestConfig) {
        return EmailsApiFp(this.configuration).getSMTPConfig(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List email samples.
     * @summary List email samples.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public listEmailSamples(options?: AxiosRequestConfig) {
        return EmailsApiFp(this.configuration).listEmailSamples(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove an email sample.
     * @summary Remove an email sample.
     * @param {EmailsApiRemoveEmailSampleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public removeEmailSample(requestParameters: EmailsApiRemoveEmailSampleRequest, options?: AxiosRequestConfig) {
        return EmailsApiFp(this.configuration).removeEmailSample(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the SMTP configuration.
     * @summary Remove the SMTP configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public removeSMTPConfig(options?: AxiosRequestConfig) {
        return EmailsApiFp(this.configuration).removeSMTPConfig(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an email sample.
     * @summary Update an email sample.
     * @param {EmailsApiUpdateEmailSampleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public updateEmailSample(requestParameters: EmailsApiUpdateEmailSampleRequest, options?: AxiosRequestConfig) {
        return EmailsApiFp(this.configuration).updateEmailSample(requestParameters.uuid, requestParameters.updateEmailSampleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the SMTP configuration.
     * @summary Update the SMTP configuration.
     * @param {EmailsApiUpdateSMTPConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsApi
     */
    public updateSMTPConfig(requestParameters: EmailsApiUpdateSMTPConfigRequest, options?: AxiosRequestConfig) {
        return EmailsApiFp(this.configuration).updateSMTPConfig(requestParameters.updateSMTPConfigRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

