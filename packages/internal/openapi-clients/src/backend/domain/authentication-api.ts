/* tslint:disable */
/* eslint-disable */
/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthPlayerResponse } from '../models';
// @ts-ignore
import { AuthResponse } from '../models';
// @ts-ignore
import { AuthenticateOAuthRequest } from '../models';
// @ts-ignore
import { DeprecatedAuthenticatedPlayerResponse } from '../models';
// @ts-ignore
import { JwtKeyResponse } from '../models';
// @ts-ignore
import { LoginRequest } from '../models';
// @ts-ignore
import { LogoutRequest } from '../models';
// @ts-ignore
import { OAuthInitRequest } from '../models';
// @ts-ignore
import { OAuthProvider } from '../models';
// @ts-ignore
import { OAuthRequest } from '../models';
// @ts-ignore
import { OAuthResponse } from '../models';
// @ts-ignore
import { PlayerResponse } from '../models';
// @ts-ignore
import { RefreshTokenRequest } from '../models';
// @ts-ignore
import { SIWEAuthenticateRequest } from '../models';
// @ts-ignore
import { SIWEInitResponse } from '../models';
// @ts-ignore
import { SIWERequest } from '../models';
// @ts-ignore
import { SignupRequest } from '../models';
// @ts-ignore
import { ThirdPartyOAuthRequest } from '../models';
// @ts-ignore
import { UnlinkRequest } from '../models';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authenticate player with oauth token.
         * @param {AuthenticateOAuthRequest} authenticateOAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateOAuth: async (authenticateOAuthRequest: AuthenticateOAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticateOAuthRequest' is not null or undefined
            assertParamExists('authenticateOAuth', 'authenticateOAuthRequest', authenticateOAuthRequest)
            const localVarPath = `/iam/v1/oauth/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticateOAuthRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Authenticate player with SIWE
         * @param {SIWEAuthenticateRequest} sIWEAuthenticateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateSIWE: async (sIWEAuthenticateRequest: SIWEAuthenticateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sIWEAuthenticateRequest' is not null or undefined
            assertParamExists('authenticateSIWE', 'sIWEAuthenticateRequest', sIWEAuthenticateRequest)
            const localVarPath = `/iam/v1/siwe/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sIWEAuthenticateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The endpoint verifies the token generated by OAuth provider, creates or retrieves a player based on his email, and returns the jwt token for the player together with the player id.
         * @summary Authorize player with token.
         * @param {OAuthProvider} provider OAuth provider
         * @param {OAuthRequest} oAuthRequest 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        authorizeWithOAuthToken: async (provider: OAuthProvider, oAuthRequest: OAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('authorizeWithOAuthToken', 'provider', provider)
            // verify required parameter 'oAuthRequest' is not null or undefined
            assertParamExists('authorizeWithOAuthToken', 'oAuthRequest', oAuthRequest)
            const localVarPath = `/iam/v1/oauth/{provider}/authorize`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication pk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oAuthRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the jwks.json file.  You can use the jwks.json file to verify the signature of a JWT token issued by Openfort Auth.
         * @summary Get the jwks.json file.
         * @param {string} publishableKey Specifies the project publishable key (starts with pk_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJwks: async (publishableKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publishableKey' is not null or undefined
            assertParamExists('getJwks', 'publishableKey', publishableKey)
            const localVarPath = `/iam/v1/{publishable_key}/jwks.json`
                .replace(`{${"publishable_key"}}`, encodeURIComponent(String(publishableKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initialize OAuth.
         * @param {OAuthInitRequest} oAuthInitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initOAuth: async (oAuthInitRequest: OAuthInitRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oAuthInitRequest' is not null or undefined
            assertParamExists('initOAuth', 'oAuthInitRequest', oAuthInitRequest)
            const localVarPath = `/iam/v1/oauth/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oAuthInitRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a challenge to link external wallet to the player.
         * @summary Initialize SIWE.
         * @param {SIWERequest} sIWERequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initSIWE: async (sIWERequest: SIWERequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sIWERequest' is not null or undefined
            assertParamExists('initSIWE', 'sIWERequest', sIWERequest)
            const localVarPath = `/iam/v1/siwe/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sIWERequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Link external wallet.
         * @param {SIWEAuthenticateRequest} sIWEAuthenticateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkSIWE: async (sIWEAuthenticateRequest: SIWEAuthenticateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sIWEAuthenticateRequest' is not null or undefined
            assertParamExists('linkSIWE', 'sIWEAuthenticateRequest', sIWEAuthenticateRequest)
            const localVarPath = `/iam/v1/siwe/link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sIWEAuthenticateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Authenticate a player based on email and password.
         * @summary Email and password login.
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginEmailPassword: async (loginRequest: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('loginEmailPassword', 'loginRequest', loginRequest)
            const localVarPath = `/iam/v1/password/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When using Openfort Auth, the endpoint logs out the player.
         * @summary Log out a player.
         * @param {LogoutRequest} logoutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (logoutRequest: LogoutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logoutRequest' is not null or undefined
            assertParamExists('logout', 'logoutRequest', logoutRequest)
            const localVarPath = `/iam/v1/sessions/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logoutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        me: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/iam/v1/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get or create a new session for the player based on the refresh token.
         * @summary Refresh or create auth session.
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh: async (refreshTokenRequest: RefreshTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshTokenRequest' is not null or undefined
            assertParamExists('refresh', 'refreshTokenRequest', refreshTokenRequest)
            const localVarPath = `/iam/v1/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and authenticate a player based on email and password.
         * @summary Email and password signup.
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupEmailPassword: async (signupRequest: SignupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signupRequest' is not null or undefined
            assertParamExists('signupEmailPassword', 'signupRequest', signupRequest)
            const localVarPath = `/iam/v1/password/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify oauth token of a third party auth provider.
         * @param {ThirdPartyOAuthRequest} thirdPartyOAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        thirdParty: async (thirdPartyOAuthRequest: ThirdPartyOAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'thirdPartyOAuthRequest' is not null or undefined
            assertParamExists('thirdParty', 'thirdPartyOAuthRequest', thirdPartyOAuthRequest)
            const localVarPath = `/iam/v1/oauth/third_party`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication pk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(thirdPartyOAuthRequest, localVarRequestOptions, configuration)
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unlink OAuth account
         * @param {UnlinkRequest} unlinkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkOAuth: async (unlinkRequest: UnlinkRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'unlinkRequest' is not null or undefined
            assertParamExists('unlinkOAuth', 'unlinkRequest', unlinkRequest)
            const localVarPath = `/iam/v1/oauth/unlink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(unlinkRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unlink external wallet.
         * @param {SIWERequest} sIWERequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkSIWE: async (sIWERequest: SIWERequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sIWERequest' is not null or undefined
            assertParamExists('unlinkSIWE', 'sIWERequest', sIWERequest)
            const localVarPath = `/iam/v1/siwe/unlink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sIWERequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.  Returns the latest 10 transaction intents for the player.
         * @summary Retrieve player by token.
         * @param {OAuthProvider} provider OAuth provider
         * @param {OAuthRequest} oAuthRequest 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        verifyOAuth: async (provider: OAuthProvider, oAuthRequest: OAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('verifyOAuth', 'provider', provider)
            // verify required parameter 'oAuthRequest' is not null or undefined
            assertParamExists('verifyOAuth', 'oAuthRequest', oAuthRequest)
            const localVarPath = `/iam/v1/oauth/{provider}/verify`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oAuthRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.  Returns the latest 10 transaction intents for the player.
         * @summary Retrieve player by oauth token.
         * @param {AuthenticateOAuthRequest} authenticateOAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyOAuthToken: async (authenticateOAuthRequest: AuthenticateOAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticateOAuthRequest' is not null or undefined
            assertParamExists('verifyOAuthToken', 'authenticateOAuthRequest', authenticateOAuthRequest)
            const localVarPath = `/iam/v1/oauth/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticateOAuthRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Authenticate player with oauth token.
         * @param {AuthenticateOAuthRequest} authenticateOAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticateOAuth(authenticateOAuthRequest: AuthenticateOAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticateOAuth(authenticateOAuthRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Authenticate player with SIWE
         * @param {SIWEAuthenticateRequest} sIWEAuthenticateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticateSIWE(sIWEAuthenticateRequest: SIWEAuthenticateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticateSIWE(sIWEAuthenticateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The endpoint verifies the token generated by OAuth provider, creates or retrieves a player based on his email, and returns the jwt token for the player together with the player id.
         * @summary Authorize player with token.
         * @param {OAuthProvider} provider OAuth provider
         * @param {OAuthRequest} oAuthRequest 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async authorizeWithOAuthToken(provider: OAuthProvider, oAuthRequest: OAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeprecatedAuthenticatedPlayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorizeWithOAuthToken(provider, oAuthRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the jwks.json file.  You can use the jwks.json file to verify the signature of a JWT token issued by Openfort Auth.
         * @summary Get the jwks.json file.
         * @param {string} publishableKey Specifies the project publishable key (starts with pk_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJwks(publishableKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JwtKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJwks(publishableKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Initialize OAuth.
         * @param {OAuthInitRequest} oAuthInitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initOAuth(oAuthInitRequest: OAuthInitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initOAuth(oAuthInitRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a challenge to link external wallet to the player.
         * @summary Initialize SIWE.
         * @param {SIWERequest} sIWERequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initSIWE(sIWERequest: SIWERequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SIWEInitResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initSIWE(sIWERequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Link external wallet.
         * @param {SIWEAuthenticateRequest} sIWEAuthenticateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkSIWE(sIWEAuthenticateRequest: SIWEAuthenticateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthPlayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkSIWE(sIWEAuthenticateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Authenticate a player based on email and password.
         * @summary Email and password login.
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginEmailPassword(loginRequest: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginEmailPassword(loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When using Openfort Auth, the endpoint logs out the player.
         * @summary Log out a player.
         * @param {LogoutRequest} logoutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(logoutRequest: LogoutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(logoutRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async me(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthPlayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.me(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get or create a new session for the player based on the refresh token.
         * @summary Refresh or create auth session.
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refresh(refreshTokenRequest: RefreshTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(refreshTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create and authenticate a player based on email and password.
         * @summary Email and password signup.
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signupEmailPassword(signupRequest: SignupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signupEmailPassword(signupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Verify oauth token of a third party auth provider.
         * @param {ThirdPartyOAuthRequest} thirdPartyOAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async thirdParty(thirdPartyOAuthRequest: ThirdPartyOAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthPlayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.thirdParty(thirdPartyOAuthRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Unlink OAuth account
         * @param {UnlinkRequest} unlinkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlinkOAuth(unlinkRequest: UnlinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthPlayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlinkOAuth(unlinkRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Unlink external wallet.
         * @param {SIWERequest} sIWERequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlinkSIWE(sIWERequest: SIWERequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthPlayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlinkSIWE(sIWERequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.  Returns the latest 10 transaction intents for the player.
         * @summary Retrieve player by token.
         * @param {OAuthProvider} provider OAuth provider
         * @param {OAuthRequest} oAuthRequest 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async verifyOAuth(provider: OAuthProvider, oAuthRequest: OAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyOAuth(provider, oAuthRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.  Returns the latest 10 transaction intents for the player.
         * @summary Retrieve player by oauth token.
         * @param {AuthenticateOAuthRequest} authenticateOAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyOAuthToken(authenticateOAuthRequest: AuthenticateOAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyOAuthToken(authenticateOAuthRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @summary Authenticate player with oauth token.
         * @param {AuthenticationApiAuthenticateOAuthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateOAuth(requestParameters: AuthenticationApiAuthenticateOAuthRequest, options?: AxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.authenticateOAuth(requestParameters.authenticateOAuthRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Authenticate player with SIWE
         * @param {AuthenticationApiAuthenticateSIWERequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateSIWE(requestParameters: AuthenticationApiAuthenticateSIWERequest, options?: AxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.authenticateSIWE(requestParameters.sIWEAuthenticateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The endpoint verifies the token generated by OAuth provider, creates or retrieves a player based on his email, and returns the jwt token for the player together with the player id.
         * @summary Authorize player with token.
         * @param {AuthenticationApiAuthorizeWithOAuthTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        authorizeWithOAuthToken(requestParameters: AuthenticationApiAuthorizeWithOAuthTokenRequest, options?: AxiosRequestConfig): AxiosPromise<DeprecatedAuthenticatedPlayerResponse> {
            return localVarFp.authorizeWithOAuthToken(requestParameters.provider, requestParameters.oAuthRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the jwks.json file.  You can use the jwks.json file to verify the signature of a JWT token issued by Openfort Auth.
         * @summary Get the jwks.json file.
         * @param {AuthenticationApiGetJwksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJwks(requestParameters: AuthenticationApiGetJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JwtKeyResponse> {
            return localVarFp.getJwks(requestParameters.publishableKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Initialize OAuth.
         * @param {AuthenticationApiInitOAuthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initOAuth(requestParameters: AuthenticationApiInitOAuthRequest, options?: AxiosRequestConfig): AxiosPromise<OAuthResponse> {
            return localVarFp.initOAuth(requestParameters.oAuthInitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a challenge to link external wallet to the player.
         * @summary Initialize SIWE.
         * @param {AuthenticationApiInitSIWERequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initSIWE(requestParameters: AuthenticationApiInitSIWERequest, options?: AxiosRequestConfig): AxiosPromise<SIWEInitResponse> {
            return localVarFp.initSIWE(requestParameters.sIWERequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Link external wallet.
         * @param {AuthenticationApiLinkSIWERequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkSIWE(requestParameters: AuthenticationApiLinkSIWERequest, options?: AxiosRequestConfig): AxiosPromise<AuthPlayerResponse> {
            return localVarFp.linkSIWE(requestParameters.sIWEAuthenticateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Authenticate a player based on email and password.
         * @summary Email and password login.
         * @param {AuthenticationApiLoginEmailPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginEmailPassword(requestParameters: AuthenticationApiLoginEmailPasswordRequest, options?: AxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.loginEmailPassword(requestParameters.loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * When using Openfort Auth, the endpoint logs out the player.
         * @summary Log out a player.
         * @param {AuthenticationApiLogoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(requestParameters: AuthenticationApiLogoutRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logout(requestParameters.logoutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        me(options?: AxiosRequestConfig): AxiosPromise<AuthPlayerResponse> {
            return localVarFp.me(options).then((request) => request(axios, basePath));
        },
        /**
         * Get or create a new session for the player based on the refresh token.
         * @summary Refresh or create auth session.
         * @param {AuthenticationApiRefreshRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh(requestParameters: AuthenticationApiRefreshRequest, options?: AxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.refresh(requestParameters.refreshTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and authenticate a player based on email and password.
         * @summary Email and password signup.
         * @param {AuthenticationApiSignupEmailPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupEmailPassword(requestParameters: AuthenticationApiSignupEmailPasswordRequest, options?: AxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.signupEmailPassword(requestParameters.signupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify oauth token of a third party auth provider.
         * @param {AuthenticationApiThirdPartyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        thirdParty(requestParameters: AuthenticationApiThirdPartyRequest, options?: AxiosRequestConfig): AxiosPromise<AuthPlayerResponse> {
            return localVarFp.thirdParty(requestParameters.thirdPartyOAuthRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unlink OAuth account
         * @param {AuthenticationApiUnlinkOAuthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkOAuth(requestParameters: AuthenticationApiUnlinkOAuthRequest, options?: AxiosRequestConfig): AxiosPromise<AuthPlayerResponse> {
            return localVarFp.unlinkOAuth(requestParameters.unlinkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unlink external wallet.
         * @param {AuthenticationApiUnlinkSIWERequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkSIWE(requestParameters: AuthenticationApiUnlinkSIWERequest, options?: AxiosRequestConfig): AxiosPromise<AuthPlayerResponse> {
            return localVarFp.unlinkSIWE(requestParameters.sIWERequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.  Returns the latest 10 transaction intents for the player.
         * @summary Retrieve player by token.
         * @param {AuthenticationApiVerifyOAuthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        verifyOAuth(requestParameters: AuthenticationApiVerifyOAuthRequest, options?: AxiosRequestConfig): AxiosPromise<PlayerResponse> {
            return localVarFp.verifyOAuth(requestParameters.provider, requestParameters.oAuthRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.  Returns the latest 10 transaction intents for the player.
         * @summary Retrieve player by oauth token.
         * @param {AuthenticationApiVerifyOAuthTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyOAuthToken(requestParameters: AuthenticationApiVerifyOAuthTokenRequest, options?: AxiosRequestConfig): AxiosPromise<PlayerResponse> {
            return localVarFp.verifyOAuthToken(requestParameters.authenticateOAuthRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authenticateOAuth operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthenticateOAuthRequest
 */
export interface AuthenticationApiAuthenticateOAuthRequest {
    /**
     * 
     * @type {AuthenticateOAuthRequest}
     * @memberof AuthenticationApiAuthenticateOAuth
     */
    readonly authenticateOAuthRequest: AuthenticateOAuthRequest
}

/**
 * Request parameters for authenticateSIWE operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthenticateSIWERequest
 */
export interface AuthenticationApiAuthenticateSIWERequest {
    /**
     * 
     * @type {SIWEAuthenticateRequest}
     * @memberof AuthenticationApiAuthenticateSIWE
     */
    readonly sIWEAuthenticateRequest: SIWEAuthenticateRequest
}

/**
 * Request parameters for authorizeWithOAuthToken operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthorizeWithOAuthTokenRequest
 */
export interface AuthenticationApiAuthorizeWithOAuthTokenRequest {
    /**
     * OAuth provider
     * @type {OAuthProvider}
     * @memberof AuthenticationApiAuthorizeWithOAuthToken
     */
    readonly provider: OAuthProvider

    /**
     * 
     * @type {OAuthRequest}
     * @memberof AuthenticationApiAuthorizeWithOAuthToken
     */
    readonly oAuthRequest: OAuthRequest
}

/**
 * Request parameters for getJwks operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiGetJwksRequest
 */
export interface AuthenticationApiGetJwksRequest {
    /**
     * Specifies the project publishable key (starts with pk_).
     * @type {string}
     * @memberof AuthenticationApiGetJwks
     */
    readonly publishableKey: string
}

/**
 * Request parameters for initOAuth operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiInitOAuthRequest
 */
export interface AuthenticationApiInitOAuthRequest {
    /**
     * 
     * @type {OAuthInitRequest}
     * @memberof AuthenticationApiInitOAuth
     */
    readonly oAuthInitRequest: OAuthInitRequest
}

/**
 * Request parameters for initSIWE operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiInitSIWERequest
 */
export interface AuthenticationApiInitSIWERequest {
    /**
     * 
     * @type {SIWERequest}
     * @memberof AuthenticationApiInitSIWE
     */
    readonly sIWERequest: SIWERequest
}

/**
 * Request parameters for linkSIWE operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiLinkSIWERequest
 */
export interface AuthenticationApiLinkSIWERequest {
    /**
     * 
     * @type {SIWEAuthenticateRequest}
     * @memberof AuthenticationApiLinkSIWE
     */
    readonly sIWEAuthenticateRequest: SIWEAuthenticateRequest
}

/**
 * Request parameters for loginEmailPassword operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiLoginEmailPasswordRequest
 */
export interface AuthenticationApiLoginEmailPasswordRequest {
    /**
     * 
     * @type {LoginRequest}
     * @memberof AuthenticationApiLoginEmailPassword
     */
    readonly loginRequest: LoginRequest
}

/**
 * Request parameters for logout operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiLogoutRequest
 */
export interface AuthenticationApiLogoutRequest {
    /**
     * 
     * @type {LogoutRequest}
     * @memberof AuthenticationApiLogout
     */
    readonly logoutRequest: LogoutRequest
}

/**
 * Request parameters for refresh operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiRefreshRequest
 */
export interface AuthenticationApiRefreshRequest {
    /**
     * 
     * @type {RefreshTokenRequest}
     * @memberof AuthenticationApiRefresh
     */
    readonly refreshTokenRequest: RefreshTokenRequest
}

/**
 * Request parameters for signupEmailPassword operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiSignupEmailPasswordRequest
 */
export interface AuthenticationApiSignupEmailPasswordRequest {
    /**
     * 
     * @type {SignupRequest}
     * @memberof AuthenticationApiSignupEmailPassword
     */
    readonly signupRequest: SignupRequest
}

/**
 * Request parameters for thirdParty operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiThirdPartyRequest
 */
export interface AuthenticationApiThirdPartyRequest {
    /**
     * 
     * @type {ThirdPartyOAuthRequest}
     * @memberof AuthenticationApiThirdParty
     */
    readonly thirdPartyOAuthRequest: ThirdPartyOAuthRequest
}

/**
 * Request parameters for unlinkOAuth operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiUnlinkOAuthRequest
 */
export interface AuthenticationApiUnlinkOAuthRequest {
    /**
     * 
     * @type {UnlinkRequest}
     * @memberof AuthenticationApiUnlinkOAuth
     */
    readonly unlinkRequest: UnlinkRequest
}

/**
 * Request parameters for unlinkSIWE operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiUnlinkSIWERequest
 */
export interface AuthenticationApiUnlinkSIWERequest {
    /**
     * 
     * @type {SIWERequest}
     * @memberof AuthenticationApiUnlinkSIWE
     */
    readonly sIWERequest: SIWERequest
}

/**
 * Request parameters for verifyOAuth operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiVerifyOAuthRequest
 */
export interface AuthenticationApiVerifyOAuthRequest {
    /**
     * OAuth provider
     * @type {OAuthProvider}
     * @memberof AuthenticationApiVerifyOAuth
     */
    readonly provider: OAuthProvider

    /**
     * 
     * @type {OAuthRequest}
     * @memberof AuthenticationApiVerifyOAuth
     */
    readonly oAuthRequest: OAuthRequest
}

/**
 * Request parameters for verifyOAuthToken operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiVerifyOAuthTokenRequest
 */
export interface AuthenticationApiVerifyOAuthTokenRequest {
    /**
     * 
     * @type {AuthenticateOAuthRequest}
     * @memberof AuthenticationApiVerifyOAuthToken
     */
    readonly authenticateOAuthRequest: AuthenticateOAuthRequest
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Authenticate player with oauth token.
     * @param {AuthenticationApiAuthenticateOAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticateOAuth(requestParameters: AuthenticationApiAuthenticateOAuthRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authenticateOAuth(requestParameters.authenticateOAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Authenticate player with SIWE
     * @param {AuthenticationApiAuthenticateSIWERequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticateSIWE(requestParameters: AuthenticationApiAuthenticateSIWERequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authenticateSIWE(requestParameters.sIWEAuthenticateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The endpoint verifies the token generated by OAuth provider, creates or retrieves a player based on his email, and returns the jwt token for the player together with the player id.
     * @summary Authorize player with token.
     * @param {AuthenticationApiAuthorizeWithOAuthTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authorizeWithOAuthToken(requestParameters: AuthenticationApiAuthorizeWithOAuthTokenRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authorizeWithOAuthToken(requestParameters.provider, requestParameters.oAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the jwks.json file.  You can use the jwks.json file to verify the signature of a JWT token issued by Openfort Auth.
     * @summary Get the jwks.json file.
     * @param {AuthenticationApiGetJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public getJwks(requestParameters: AuthenticationApiGetJwksRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).getJwks(requestParameters.publishableKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Initialize OAuth.
     * @param {AuthenticationApiInitOAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public initOAuth(requestParameters: AuthenticationApiInitOAuthRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).initOAuth(requestParameters.oAuthInitRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a challenge to link external wallet to the player.
     * @summary Initialize SIWE.
     * @param {AuthenticationApiInitSIWERequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public initSIWE(requestParameters: AuthenticationApiInitSIWERequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).initSIWE(requestParameters.sIWERequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Link external wallet.
     * @param {AuthenticationApiLinkSIWERequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public linkSIWE(requestParameters: AuthenticationApiLinkSIWERequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).linkSIWE(requestParameters.sIWEAuthenticateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Authenticate a player based on email and password.
     * @summary Email and password login.
     * @param {AuthenticationApiLoginEmailPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public loginEmailPassword(requestParameters: AuthenticationApiLoginEmailPasswordRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).loginEmailPassword(requestParameters.loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When using Openfort Auth, the endpoint logs out the player.
     * @summary Log out a player.
     * @param {AuthenticationApiLogoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public logout(requestParameters: AuthenticationApiLogoutRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).logout(requestParameters.logoutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public me(options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).me(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get or create a new session for the player based on the refresh token.
     * @summary Refresh or create auth session.
     * @param {AuthenticationApiRefreshRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public refresh(requestParameters: AuthenticationApiRefreshRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).refresh(requestParameters.refreshTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and authenticate a player based on email and password.
     * @summary Email and password signup.
     * @param {AuthenticationApiSignupEmailPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public signupEmailPassword(requestParameters: AuthenticationApiSignupEmailPasswordRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).signupEmailPassword(requestParameters.signupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify oauth token of a third party auth provider.
     * @param {AuthenticationApiThirdPartyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public thirdParty(requestParameters: AuthenticationApiThirdPartyRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).thirdParty(requestParameters.thirdPartyOAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unlink OAuth account
     * @param {AuthenticationApiUnlinkOAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public unlinkOAuth(requestParameters: AuthenticationApiUnlinkOAuthRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).unlinkOAuth(requestParameters.unlinkRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unlink external wallet.
     * @param {AuthenticationApiUnlinkSIWERequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public unlinkSIWE(requestParameters: AuthenticationApiUnlinkSIWERequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).unlinkSIWE(requestParameters.sIWERequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.  Returns the latest 10 transaction intents for the player.
     * @summary Retrieve player by token.
     * @param {AuthenticationApiVerifyOAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public verifyOAuth(requestParameters: AuthenticationApiVerifyOAuthRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).verifyOAuth(requestParameters.provider, requestParameters.oAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.  Returns the latest 10 transaction intents for the player.
     * @summary Retrieve player by oauth token.
     * @param {AuthenticationApiVerifyOAuthTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public verifyOAuthToken(requestParameters: AuthenticationApiVerifyOAuthTokenRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).verifyOAuthToken(requestParameters.authenticateOAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

