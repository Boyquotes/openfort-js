/* tslint:disable */
/* eslint-disable */
/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateWeb3ConnectionRequest } from '../models';
// @ts-ignore
import { SortOrder } from '../models';
// @ts-ignore
import { SubmitWeb3ActionRequest } from '../models';
// @ts-ignore
import { Web3ActionListResponse } from '../models';
// @ts-ignore
import { Web3ActionResponse } from '../models';
// @ts-ignore
import { Web3ConnectionListResponse } from '../models';
// @ts-ignore
import { Web3ConnectionResponse } from '../models';
// @ts-ignore
import { Web3ConnectionResponseExpandable } from '../models';
/**
 * Web3ConnectionsApi - axios parameter creator
 * @export
 */
export const Web3ConnectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to create a new web3 connection to your Openfort player. Together with the player ID (pla_), you need to provide a chain ID. The chain to use is required because Openfort needs to make sure the account is deployed, as counterfactual addresses cannot use web3 connections. The `uri` body parameter must contain a [WalletConnect pairing URI](https://specs.walletconnect.com/2.0/specs/clients/core/pairing/pairing-uri).
         * @summary Create a Web3 Connection object.
         * @param {CreateWeb3ConnectionRequest} createWeb3ConnectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWeb3Connection: async (createWeb3ConnectionRequest: CreateWeb3ConnectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createWeb3ConnectionRequest' is not null or undefined
            assertParamExists('createWeb3Connection', 'createWeb3ConnectionRequest', createWeb3ConnectionRequest)
            const localVarPath = `/v1/web3_connections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWeb3ConnectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of web3 actions for the given web3 connection. The actions are returned sorted by creation date, with the most recently received action appearing first. By default, a maximum of ten actions are shown per page.
         * @summary List Web3 actions from a web3 connection.
         * @param {string} id Specifies the web3Connection ID (starts with web3_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeb3Actions: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWeb3Actions', 'id', id)
            const localVarPath = `/v1/web3_connections/{id}/actions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing web3 connection. Supply the unique web3 connection ID from either a web3 connection creation request or the web3 connection list. Openfort will return the corresponding web3 connection information.
         * @summary Get a web3Connection object.
         * @param {string} id Specifies the unique web3Connection ID (starts with web3_).
         * @param {Array<Web3ConnectionResponseExpandable>} [expand] Specifies the fields to expand.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeb3Connection: async (id: string, expand?: Array<Web3ConnectionResponseExpandable>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWeb3Connection', 'id', id)
            const localVarPath = `/v1/web3_connections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (expand) {
                localVarQueryParameter['expand'] = expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of web3 connections for the given player. The connections are returned sorted by creation date, with the most recently created connections appearing first. By default, a maximum of ten connections are shown per page.
         * @summary List Web3 connections.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {string} [player] Specifies the unique player ID (starts with pla_)
         * @param {boolean} [disconnected] Specifies connection status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeb3Connections: async (limit?: number, skip?: number, order?: SortOrder, player?: string, disconnected?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/web3_connections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (player !== undefined) {
                localVarQueryParameter['player'] = player;
            }

            if (disconnected !== undefined) {
                localVarQueryParameter['disconnected'] = disconnected;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Approve or Reject a web3 action for the given web3 connection.
         * @summary Approve or Reject a web3 action
         * @param {string} id Specifies the web3Connection ID (starts with web3_).
         * @param {string} web3Action Specifies web3_action (starts with act_).
         * @param {SubmitWeb3ActionRequest} submitWeb3ActionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitWeb3Action: async (id: string, web3Action: string, submitWeb3ActionRequest: SubmitWeb3ActionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('submitWeb3Action', 'id', id)
            // verify required parameter 'web3Action' is not null or undefined
            assertParamExists('submitWeb3Action', 'web3Action', web3Action)
            // verify required parameter 'submitWeb3ActionRequest' is not null or undefined
            assertParamExists('submitWeb3Action', 'submitWeb3ActionRequest', submitWeb3ActionRequest)
            const localVarPath = `/v1/web3_connections/{id}/actions/{web3_action}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"web3_action"}}`, encodeURIComponent(String(web3Action)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sk required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitWeb3ActionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Web3ConnectionsApi - functional programming interface
 * @export
 */
export const Web3ConnectionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Web3ConnectionsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to create a new web3 connection to your Openfort player. Together with the player ID (pla_), you need to provide a chain ID. The chain to use is required because Openfort needs to make sure the account is deployed, as counterfactual addresses cannot use web3 connections. The `uri` body parameter must contain a [WalletConnect pairing URI](https://specs.walletconnect.com/2.0/specs/clients/core/pairing/pairing-uri).
         * @summary Create a Web3 Connection object.
         * @param {CreateWeb3ConnectionRequest} createWeb3ConnectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWeb3Connection(createWeb3ConnectionRequest: CreateWeb3ConnectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Web3ConnectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWeb3Connection(createWeb3ConnectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of web3 actions for the given web3 connection. The actions are returned sorted by creation date, with the most recently received action appearing first. By default, a maximum of ten actions are shown per page.
         * @summary List Web3 actions from a web3 connection.
         * @param {string} id Specifies the web3Connection ID (starts with web3_).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeb3Actions(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Web3ActionListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeb3Actions(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of an existing web3 connection. Supply the unique web3 connection ID from either a web3 connection creation request or the web3 connection list. Openfort will return the corresponding web3 connection information.
         * @summary Get a web3Connection object.
         * @param {string} id Specifies the unique web3Connection ID (starts with web3_).
         * @param {Array<Web3ConnectionResponseExpandable>} [expand] Specifies the fields to expand.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeb3Connection(id: string, expand?: Array<Web3ConnectionResponseExpandable>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Web3ConnectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeb3Connection(id, expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of web3 connections for the given player. The connections are returned sorted by creation date, with the most recently created connections appearing first. By default, a maximum of ten connections are shown per page.
         * @summary List Web3 connections.
         * @param {number} [limit] Specifies the maximum number of records to return.
         * @param {number} [skip] Specifies the offset for the first records to return.
         * @param {SortOrder} [order] Specifies the order in which to sort the results.
         * @param {string} [player] Specifies the unique player ID (starts with pla_)
         * @param {boolean} [disconnected] Specifies connection status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWeb3Connections(limit?: number, skip?: number, order?: SortOrder, player?: string, disconnected?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Web3ConnectionListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWeb3Connections(limit, skip, order, player, disconnected, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Approve or Reject a web3 action for the given web3 connection.
         * @summary Approve or Reject a web3 action
         * @param {string} id Specifies the web3Connection ID (starts with web3_).
         * @param {string} web3Action Specifies web3_action (starts with act_).
         * @param {SubmitWeb3ActionRequest} submitWeb3ActionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitWeb3Action(id: string, web3Action: string, submitWeb3ActionRequest: SubmitWeb3ActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Web3ActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitWeb3Action(id, web3Action, submitWeb3ActionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * Web3ConnectionsApi - factory interface
 * @export
 */
export const Web3ConnectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Web3ConnectionsApiFp(configuration)
    return {
        /**
         * This endpoint allows you to create a new web3 connection to your Openfort player. Together with the player ID (pla_), you need to provide a chain ID. The chain to use is required because Openfort needs to make sure the account is deployed, as counterfactual addresses cannot use web3 connections. The `uri` body parameter must contain a [WalletConnect pairing URI](https://specs.walletconnect.com/2.0/specs/clients/core/pairing/pairing-uri).
         * @summary Create a Web3 Connection object.
         * @param {Web3ConnectionsApiCreateWeb3ConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWeb3Connection(requestParameters: Web3ConnectionsApiCreateWeb3ConnectionRequest, options?: AxiosRequestConfig): AxiosPromise<Web3ConnectionResponse> {
            return localVarFp.createWeb3Connection(requestParameters.createWeb3ConnectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of web3 actions for the given web3 connection. The actions are returned sorted by creation date, with the most recently received action appearing first. By default, a maximum of ten actions are shown per page.
         * @summary List Web3 actions from a web3 connection.
         * @param {Web3ConnectionsApiGetWeb3ActionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeb3Actions(requestParameters: Web3ConnectionsApiGetWeb3ActionsRequest, options?: AxiosRequestConfig): AxiosPromise<Web3ActionListResponse> {
            return localVarFp.getWeb3Actions(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of an existing web3 connection. Supply the unique web3 connection ID from either a web3 connection creation request or the web3 connection list. Openfort will return the corresponding web3 connection information.
         * @summary Get a web3Connection object.
         * @param {Web3ConnectionsApiGetWeb3ConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeb3Connection(requestParameters: Web3ConnectionsApiGetWeb3ConnectionRequest, options?: AxiosRequestConfig): AxiosPromise<Web3ConnectionResponse> {
            return localVarFp.getWeb3Connection(requestParameters.id, requestParameters.expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of web3 connections for the given player. The connections are returned sorted by creation date, with the most recently created connections appearing first. By default, a maximum of ten connections are shown per page.
         * @summary List Web3 connections.
         * @param {Web3ConnectionsApiGetWeb3ConnectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWeb3Connections(requestParameters: Web3ConnectionsApiGetWeb3ConnectionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Web3ConnectionListResponse> {
            return localVarFp.getWeb3Connections(requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.player, requestParameters.disconnected, options).then((request) => request(axios, basePath));
        },
        /**
         * Approve or Reject a web3 action for the given web3 connection.
         * @summary Approve or Reject a web3 action
         * @param {Web3ConnectionsApiSubmitWeb3ActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitWeb3Action(requestParameters: Web3ConnectionsApiSubmitWeb3ActionRequest, options?: AxiosRequestConfig): AxiosPromise<Web3ActionResponse> {
            return localVarFp.submitWeb3Action(requestParameters.id, requestParameters.web3Action, requestParameters.submitWeb3ActionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createWeb3Connection operation in Web3ConnectionsApi.
 * @export
 * @interface Web3ConnectionsApiCreateWeb3ConnectionRequest
 */
export interface Web3ConnectionsApiCreateWeb3ConnectionRequest {
    /**
     * 
     * @type {CreateWeb3ConnectionRequest}
     * @memberof Web3ConnectionsApiCreateWeb3Connection
     */
    readonly createWeb3ConnectionRequest: CreateWeb3ConnectionRequest
}

/**
 * Request parameters for getWeb3Actions operation in Web3ConnectionsApi.
 * @export
 * @interface Web3ConnectionsApiGetWeb3ActionsRequest
 */
export interface Web3ConnectionsApiGetWeb3ActionsRequest {
    /**
     * Specifies the web3Connection ID (starts with web3_).
     * @type {string}
     * @memberof Web3ConnectionsApiGetWeb3Actions
     */
    readonly id: string
}

/**
 * Request parameters for getWeb3Connection operation in Web3ConnectionsApi.
 * @export
 * @interface Web3ConnectionsApiGetWeb3ConnectionRequest
 */
export interface Web3ConnectionsApiGetWeb3ConnectionRequest {
    /**
     * Specifies the unique web3Connection ID (starts with web3_).
     * @type {string}
     * @memberof Web3ConnectionsApiGetWeb3Connection
     */
    readonly id: string

    /**
     * Specifies the fields to expand.
     * @type {Array<Web3ConnectionResponseExpandable>}
     * @memberof Web3ConnectionsApiGetWeb3Connection
     */
    readonly expand?: Array<Web3ConnectionResponseExpandable>
}

/**
 * Request parameters for getWeb3Connections operation in Web3ConnectionsApi.
 * @export
 * @interface Web3ConnectionsApiGetWeb3ConnectionsRequest
 */
export interface Web3ConnectionsApiGetWeb3ConnectionsRequest {
    /**
     * Specifies the maximum number of records to return.
     * @type {number}
     * @memberof Web3ConnectionsApiGetWeb3Connections
     */
    readonly limit?: number

    /**
     * Specifies the offset for the first records to return.
     * @type {number}
     * @memberof Web3ConnectionsApiGetWeb3Connections
     */
    readonly skip?: number

    /**
     * Specifies the order in which to sort the results.
     * @type {SortOrder}
     * @memberof Web3ConnectionsApiGetWeb3Connections
     */
    readonly order?: SortOrder

    /**
     * Specifies the unique player ID (starts with pla_)
     * @type {string}
     * @memberof Web3ConnectionsApiGetWeb3Connections
     */
    readonly player?: string

    /**
     * Specifies connection status
     * @type {boolean}
     * @memberof Web3ConnectionsApiGetWeb3Connections
     */
    readonly disconnected?: boolean
}

/**
 * Request parameters for submitWeb3Action operation in Web3ConnectionsApi.
 * @export
 * @interface Web3ConnectionsApiSubmitWeb3ActionRequest
 */
export interface Web3ConnectionsApiSubmitWeb3ActionRequest {
    /**
     * Specifies the web3Connection ID (starts with web3_).
     * @type {string}
     * @memberof Web3ConnectionsApiSubmitWeb3Action
     */
    readonly id: string

    /**
     * Specifies web3_action (starts with act_).
     * @type {string}
     * @memberof Web3ConnectionsApiSubmitWeb3Action
     */
    readonly web3Action: string

    /**
     * 
     * @type {SubmitWeb3ActionRequest}
     * @memberof Web3ConnectionsApiSubmitWeb3Action
     */
    readonly submitWeb3ActionRequest: SubmitWeb3ActionRequest
}

/**
 * Web3ConnectionsApi - object-oriented interface
 * @export
 * @class Web3ConnectionsApi
 * @extends {BaseAPI}
 */
export class Web3ConnectionsApi extends BaseAPI {
    /**
     * This endpoint allows you to create a new web3 connection to your Openfort player. Together with the player ID (pla_), you need to provide a chain ID. The chain to use is required because Openfort needs to make sure the account is deployed, as counterfactual addresses cannot use web3 connections. The `uri` body parameter must contain a [WalletConnect pairing URI](https://specs.walletconnect.com/2.0/specs/clients/core/pairing/pairing-uri).
     * @summary Create a Web3 Connection object.
     * @param {Web3ConnectionsApiCreateWeb3ConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3ConnectionsApi
     */
    public createWeb3Connection(requestParameters: Web3ConnectionsApiCreateWeb3ConnectionRequest, options?: AxiosRequestConfig) {
        return Web3ConnectionsApiFp(this.configuration).createWeb3Connection(requestParameters.createWeb3ConnectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of web3 actions for the given web3 connection. The actions are returned sorted by creation date, with the most recently received action appearing first. By default, a maximum of ten actions are shown per page.
     * @summary List Web3 actions from a web3 connection.
     * @param {Web3ConnectionsApiGetWeb3ActionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3ConnectionsApi
     */
    public getWeb3Actions(requestParameters: Web3ConnectionsApiGetWeb3ActionsRequest, options?: AxiosRequestConfig) {
        return Web3ConnectionsApiFp(this.configuration).getWeb3Actions(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the details of an existing web3 connection. Supply the unique web3 connection ID from either a web3 connection creation request or the web3 connection list. Openfort will return the corresponding web3 connection information.
     * @summary Get a web3Connection object.
     * @param {Web3ConnectionsApiGetWeb3ConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3ConnectionsApi
     */
    public getWeb3Connection(requestParameters: Web3ConnectionsApiGetWeb3ConnectionRequest, options?: AxiosRequestConfig) {
        return Web3ConnectionsApiFp(this.configuration).getWeb3Connection(requestParameters.id, requestParameters.expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of web3 connections for the given player. The connections are returned sorted by creation date, with the most recently created connections appearing first. By default, a maximum of ten connections are shown per page.
     * @summary List Web3 connections.
     * @param {Web3ConnectionsApiGetWeb3ConnectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3ConnectionsApi
     */
    public getWeb3Connections(requestParameters: Web3ConnectionsApiGetWeb3ConnectionsRequest = {}, options?: AxiosRequestConfig) {
        return Web3ConnectionsApiFp(this.configuration).getWeb3Connections(requestParameters.limit, requestParameters.skip, requestParameters.order, requestParameters.player, requestParameters.disconnected, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Approve or Reject a web3 action for the given web3 connection.
     * @summary Approve or Reject a web3 action
     * @param {Web3ConnectionsApiSubmitWeb3ActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3ConnectionsApi
     */
    public submitWeb3Action(requestParameters: Web3ConnectionsApiSubmitWeb3ActionRequest, options?: AxiosRequestConfig) {
        return Web3ConnectionsApiFp(this.configuration).submitWeb3Action(requestParameters.id, requestParameters.web3Action, requestParameters.submitWeb3ActionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

